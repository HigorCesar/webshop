<?xml version="1.0" encoding="utf-8" ?>
<articles>
<article>
    <Id>1</Id>
    <Name>Domain-Driven Design: Tackling Complexity in the Heart of Software</Name>
    <Description>If you have even been involved in a software project (a) as a developer and did not know what the end product is going to be used for or how it will be used or (b) as an architect who spent countless hours with your stakeholders and domain experts trying to figure out how to go about architecting your application, then you should read this book. Read it again after you have read it for the first time. This book is packed with pointers, information, tips, how-tos, "down to earth" practical samples, and even conversational examples that one could have while gathering requirements. Evans in his book fills a wide gap that we all tend to come across while designing software applications...</Description>
    <Price>30.00</Price>
    <Vat>2.00</Vat>
    <Image>https://images-na.ssl-images-amazon.com/images/I/515FeOFonQL._SX378_BO1,204,203,200_.jpg</Image>
  </article>
  <article>
    <Id>2</Id>
    <Name>Design Patterns: Elements of Reusable Object-Oriented Software</Name>
    <Description>These texts cover the design of object-oriented software and examine how to investigate requirements, create solutions and then translate designs into code, showing developers how to make practical use of the most significant recent developments. A summary of UML notation is included...</Description>
    <Price>10.40</Price>
    <Vat>1.40</Vat>
    <Image>https://images-na.ssl-images-amazon.com/images/I/51szD9HC9pL._SX395_BO1,204,203,200_.jpg</Image>
  </article>
</articles>